<?xml version="1.0" ?>

<!--
Copyright 2006-2009 Jeroen van Menen

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="WatiN" default="full" xmlns="http://nant.sf.net/release/0.85-rc4/nant.xsd">

  <property name="project.name"                   value="WatiN" />

  <property name="base.dir"                       value="${project::get-base-directory()}" />
  <property name="build.base.dir"                 value="${base.dir}\build" />
  <property name="source.dir"                     value="${base.dir}\src" />

  <property name="system32.dir"                   value="${environment::get-variable('SystemRoot')}\system32"/>
  <property name="pia.dir"                        value="${environment::get-variable('SystemDrive')}\Program Files\Microsoft.Net\Primary Interop Assemblies"/>

  <property name="core.name"                      value="WatiN.Core" />
  <property name="core.assembly.name"             value="${core.name}.dll" />
  <property name="core.xmldoc.name"               value="${core.name}.xml" />
  <property name="core.source.dir"                value="${source.dir}\Core" />
  <property name="core.helpfile.name"             value="WatiN" />

  <property name="unittests.name"                 value="${core.name}.UnitTests" />
  <property name="unittests.assembly.name"        value="${unittests.name}.dll" />
  <property name="unittests.source.dir"           value="${source.dir}\UnitTests" />
  <property name="unittests.config.name"          value="${unittests.assembly.name}.config" />
  <property name="unittests.config.file"          value="${unittests.source.dir}\${unittests.config.name}" />
  <property name="unittests.htmlfiles.dir"        value="${unittests.source.dir}\html" />
  <property name="unittests.run"				          value="true" readonly="false" overwrite="true"  />

  <property name="shdocvw.namespace"              value="SHDocVw" />
  <property name="shdocvw.assembly.name"          value="Interop.SHDocVw.dll" />
  <property name="shdocvw.typlib"                 value="${system32.dir}\shdocvw.dll" />

  <property name="installer.source.dir"           value="${source.dir}\Installer\" />

  <property name="tools.dir"                      value="${base.dir}\tools" />
  <property name="ncoverexplorer.console.file"		value="${tools.dir}\NCoverExplorer\NCoverExplorer.Console.exe" />
  <property name="ncover.console.file"	        	value="${tools.dir}\NCover\NCover.Console.exe" />
  <property name="ndoc2.task.file"								value="${tools.dir}\NCoverExplorerExtras\bin\NCoverExplorer.NAntTasks.dll" />
  <property name="ndoc2.console.file"							value="${tools.dir}\NDoc2\NDocConsole.exe" />
  <property name="wix.dir"                      	value="${tools.dir}\WiX" />

  <property name="key.file" value="${source.dir}\WatiN.snk" />

  <!-- User targets -->
  <target name="clean" description="Delete Automated Build artifacts">
    <delete dir="${build.dir}" if="${directory::exists(build.dir)}"/>
  </target>

  <target name="build">
    <property name="core.assembly.file" value="${bin.dir}\${core.assembly.name}" />

    <tlbimp typelib="${shdocvw.typlib}" output="${bin.dir}\${shdocvw.assembly.name}" namespace="${shdocvw.namespace}" keyfile="${key.file}" />

    <csc define="${project.properties.define}" debug="true" rebuild="true" target="library" output="${core.assembly.file}" doc="${bin.dir}\${core.xmldoc.name}"  keyfile="${key.file}">
      <sources>
        <include name="${core.source.dir}\**.cs"/>
      </sources>
      <references>
        <include name="${bin.dir}\${shdocvw.assembly.name}"/>
        <include name="${pia.dir}\Microsoft.mshtml.dll"/>
        <include name="System.dll"/>
        <include name="System.Core.dll" if="${string::contains('${net.framework}','net-3.5')}"/>
        <include name="System.Drawing.dll"/>
        <include name="System.Windows.Forms.dll"/>
        <include name="System.Web.dll"/>
      </references>
      <resources prefix="WatiN.Core.Properties">
        <include name="${core.source.dir}\Properties\*.resx"/>
      </resources>

      <nowarn>
        <warning number="0618" />
        <warning number="1591" />
        <warning number="1616"/>
      </nowarn>
    </csc>

    <property name="core.assembly.version" value="${fileversioninfo::get-product-version(fileversioninfo::get-version-info(core.assembly.file))}" />
    <property name="core.assembly.buildmajorminor" value="${string::substring(core.assembly.version, 0, string::get-length(core.assembly.version) - int::parse(5))}" />

    <csc define="${project.properties.define}" debug="true" rebuild="true" target="library" output="${bin.dir}\${unittests.assembly.name}" keyfile="${key.file}">
      <sources>
        <include name="${unittests.source.dir}\**.cs"/>
      </sources>
      <references>
        <include name="${bin.dir}\${shdocvw.assembly.name}"/>
        <include name="${pia.dir}\Microsoft.mshtml.dll"/>
        <include name="${bin.dir}\${core.assembly.name}"/>
        <include name="${libraries.dir}\nunit.framework.dll"/>
        <include name="${libraries.dir}\Moq.dll"/>
        <include name="System.dll"/>
        <include name="System.Core.dll"/>
      </references>
      <nowarn>
        <warning number="0618" />
        <warning number="1616" />
      </nowarn>
    </csc>

    <copy file="${libraries.dir}\nunit.framework.dll" todir="${bin.dir}" />
    <copy file="${libraries.dir}\Moq.dll" todir="${bin.dir}" />

    <call target="copy-testdata" />
  </target>

  <target name="set-net-2.0-version">
    <property name="nant.settings.currentframework" value="net-3.5" overwrite="false" /> <!-- use .Net 3.5 compiler but we only use a restricted subset of features -->
    <property name="net.framework"                  value="net-2.0" overwrite="false" />
    <property name="net.framework.fullname"         value=".Net 2.0" />
    <property name="project.properties.define"      value="NET20" />
    <property name="libraries.dir"                  value="${base.dir}\lib\Net\2.0" />
    <property name="path.nunit.console"	            value="${tools.dir}\NUnit\Net-2.0-bin\nunit-console.exe" />

    <call target="init-properties"  />
  </target>

  <target name="set-net-3.5-version">
    <property name="nant.settings.currentframework" value="net-3.5" overwrite="false" />
    <property name="net.framework"                  value="net-3.5" overwrite="false" />
    <property name="net.framework.fullname"         value=".Net 3.5" />
    <property name="project.properties.define"      value="NET35" />
    <property name="libraries.dir"                  value="${base.dir}\lib\Net\3.5" />
    <property name="path.nunit.console"	            value="${tools.dir}\NUnit\Net-2.0-bin\nunit-console.exe" />

    <call target="init-properties"  />
  </target>

  <target name="init-properties">
    <property name="build.dir"                      value="${build.base.dir}\${net.framework}" />

    <property name="bin.dir" 			                  value="${build.dir}\bin" />
    <property name="reports.dir" 			              value="${build.dir}\test-reports" />
    <property name="distribution.dir"               value="${build.dir}\dist" />
    <property name="installer.wixobj.dir"           value="${build.dir}\wixobj\" />
    <property name="coverage.xml.output.file" 	    value="${reports.dir}\Coverage.xml" />

    <property name="unittests.htmlfiles.todir"      value="${bin.dir}\html"/>
    <property name="unittest.assembly.file"		      value="${bin.dir}\${unittests.assembly.name}" />
    <property name="unittest.xml.output.file" 	    value="${reports.dir}\UnitTests.xml" />

    <property name="core.helpfile.file"             value="${build.dir}\ndoc\${core.helpfile.name}.chm" />
  </target>

  <target name="copy-testdata">
    <!-- Copy HTML files -->
    <mkdir dir="${unittests.htmlfiles.todir}" unless="${directory::exists(unittests.htmlfiles.todir)}" />

    <copy todir="${unittests.htmlfiles.todir}" >
      <fileset basedir ="${unittests.htmlfiles.dir}">
        <include name="\**" />
        <exclude name="*.db" />
      </fileset>
    </copy>

    <!-- Copy config file for running tests with NUnit -->
    <copy file="${unittests.config.file}"  todir="${bin.dir}" />
  </target>

  <!-- Internal targets -->
  <target name="run-unit-tests" if="${unittests.run}">
    <mkdir dir="${reports.dir}" />

    <exec program="${path::get-file-name(path.nunit.console)}" basedir="${path::get-directory-name(path.nunit.console)}" workingdir="${path::get-directory-name(unittest.assembly.file)}">
      <arg value="${unittest.assembly.file}" />
      <arg value="/xml:${unittest.xml.output.file}" />
    </exec>
  </target>

  <target name="run-unit-tests-with-coverage" if="${unittests.run}">
    <mkdir dir="${reports.dir}" />

    <exec program="regsvr32" workingdir="${path::get-directory-name(ncover.console.file)}" commandline="/s CoverLib.dll" />

    <!-- This runs NUnit through NCover.org version 1.3, giving coverage results. 
			If you don't want to use NCover, delete this 'exec' instance, and use the plain NUnit one below -->
    <exec program="${ncover.console.file}"
			workingdir="${path::get-directory-name(unittest.assembly.file)}">
      <arg value="/w" />
      <arg value="." />
      <arg value="/o" />
      <arg value="&quot;${coverage.xml.output.file}&quot;" />
      <arg value="/c" />
      <arg value="&quot;${path.nunit.console}&quot;" />
      <arg value="&quot;${unittest.assembly.file} /xml:${unittest.xml.output.file} /nologo&quot;" />
    </exec>

    <call target="util.ncoverexplorer.exec" />
  </target>

  <target name="util.ncoverexplorer.exec">
    <echo message="Starting NCoverExplorer report generation..."/>

    <exec program="${ncoverexplorer.console.file}"
			  workingdir="${path::get-directory-name(ncoverexplorer.console.file)}" >
      <!-- Names of the coverage.xml file(s) to merge into the coverage report -->
      <arg value="&quot;${coverage.xml.output.file}&quot;" />
      <!-- /r[eport] Report type (1=Module, 2=Namespace, 3=Module/Namespace)   -->
      <arg value="/r:3"/>
      <!-- /x[ml][:filename] If specified will generate an xml report.         -->
      <!--                   If no filename uses CoverageReport.xml            -->
      <arg value="/x" />
      <!-- /h[tml][:filename] If specified will generate an html report.       -->
      <!--                    If no filename uses CoverageReport.html          -->
      <arg value="/h" />
      <!-- /e[xclusions] Include an exclusions footer in the report.           -->
      <arg value="/e" />
      <!-- /p[roject] Project name to appear in the report                     -->
      <arg value="/p:${project.name}" />
      <!-- /m[inCoverage] Minimum acceptable coverage threshold.               -->
      <arg value="/m:75" />
      <!-- /f[ailMinimum] Fail the build if coverage < minimum threshold.      -->
      <!--<arg value="/f" />-->
      <!-- /c[onfig] configuration file -->
      <!--<arg value="/c:MyProject.config" />-->
    </exec>
  </target>

  <target name="ndoc" description="Creates documentation with ndoc 2 alpha 3">
    <loadtasks assembly="${ndoc2.task.file}" />

    <ndoc2 program="${ndoc2.console.file}">
      <assemblies basedir="${bin.dir}">
        <include name="${core.assembly.name}" />
      </assemblies>
      <documenters>
        <documenter name="MSDN-CHM">
          <property name="OutputDirectory" value="${path::get-directory-name(core.helpfile.file)}" />
          <property name="HtmlHelpName" value="${core.helpfile.name}" />
          <property name="Title" value="${project.name} ${core.assembly.version} Documentation (generated with NDoc2)" />
          <property name="AssemblyVersionInfo" value="AssemblyVersion" />
          <property name="CopyrightHref" value="http://www.watin.net/" />
          <property name="CopyrightText" value="(C) Jeroen van Menen 2006-2008" />
          <property name="Preliminary" value="False" />
          <property name="CleanIntermediates" value="True" />
          <property name="IncludeDefaultThreadSafety" value="False" />
        </documenter>
      </documenters>
    </ndoc2>
  </target>

  <target name="ndocweb" description="Creates documentation with ndoc 2 alpha 3">
    <loadtasks assembly="${ndoc2.task.file}" />

    <ndoc2 program="${ndoc2.console.file}">
      <assemblies basedir="${bin.dir}">
        <include name="${core.assembly.name}" />
      </assemblies>
      <documenters>
        <documenter name="MSDN-Web">
          <property name="OutputDirectory" value="${path::get-directory-name(core.helpfile.file)}" />
          <property name="HtmlHelpName" value="${core.helpfile.name}" />
          <property name="Title" value="${project.name} ${core.assembly.version} Documentation (generated with NDoc2)" />
          <property name="AssemblyVersionInfo" value="AssemblyVersion" />
          <property name="CopyrightHref" value="http://www.watin.net/" />
          <property name="CopyrightText" value="(C) Jeroen van Menen 2006-2008" />
          <property name="Preliminary" value="False" />
          <property name="CleanIntermediates" value="True" />
          <property name="IncludeDefaultThreadSafety" value="False" />
        </documenter>
      </documenters>
    </ndoc2>
  </target>

  <target name="dist">
    <!-- Copy distribution root files -->
    <copy file="${source.dir}\Core\Readme.txt" todir ="${distribution.dir}" />
    <copy file="${source.dir}\Core\License.txt" todir ="${distribution.dir}" />
    <copy file="${source.dir}\ReleaseHistory.txt" todir ="${distribution.dir}" />
    <copy file="${core.helpfile.file}" todir ="${distribution.dir}" />

    <!-- Copy the binaries -->
    <copy todir="${distribution.dir}\bin">
      <fileset basedir="${bin.dir}">
        <include name="*.dll"/>
        <include name="*.config"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy file="${pia.dir}\Microsoft.mshtml.dll" todir="${distribution.dir}\bin" />

    <copy todir="${distribution.dir}\bin\html">
      <fileset basedir ="${unittests.htmlfiles.todir}">
        <include name="\**" />
      </fileset>
    </copy>

    <!-- Copy the sources -->
    <copy todir="${distribution.dir}\src\UnitTests">
      <fileset basedir="${source.dir}\UnitTests">
        <include name="**.cs"/>
        <include name="*.csproj"/>
        <include name="*.config"/>
        <include name="html\**"/>
      </fileset>
    </copy>

    <copy todir="${distribution.dir}\src\Core">
      <fileset basedir="${source.dir}\Core">
        <include name="**.cs"/>
        <include name="**.csproj"/>
      </fileset>
    </copy>

    <copy file="${source.dir}\WatiN.sln" todir ="${distribution.dir}\src" />

    <!-- Adjust reference to Interop.SHDocVw.dll -->
    <xmlpoke file="${distribution.dir}\src\Core\Core.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/References/Reference[@Name = 'Interop.SHDocVw']/@HintPath"
        value="..\..\bin\Interop.SHDocVw.dll" />

    <!-- Adjust reference to Microsoft.mshtml.dll -->
    <xmlpoke file="${distribution.dir}\src\Core\Core.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/References/Reference[@Name = 'Microsoft.mshtml']/@HintPath"
        value="..\..\bin\Microsoft.mshtml.dll" />

    <!-- Adjust conditional compilation constants -->
    <xmlpoke file="${distribution.dir}\src\Core\Core.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/Settings/Config[starts-with(@Name, 'Debug')]/@DefineConstants"
        value="DEBUG;TRACE;${project.properties.define}" />

    <xmlpoke file="${distribution.dir}\src\Core\Core.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/Settings/Config[starts-with(@Name, 'Release')]/@DefineConstants"
        value="TRACE;${project.properties.define}" />

    <xmlpoke file="${distribution.dir}\src\UnitTests\UnitTests.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/References/Reference[@Name = 'Interop.SHDocVw']/@HintPath"
        value="..\..\bin\Interop.SHDocVw.dll" />

    <xmlpoke file="${distribution.dir}\src\UnitTests\UnitTests.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/References/Reference[@Name = 'Moq']/@HintPath"
        value="..\..\bin\nunit.framework.dll" />

    <xmlpoke file="${distribution.dir}\src\UnitTests\UnitTests.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/References/Reference[@Name = 'nunit.framework']/@HintPath"
        value="..\..\bin\Moq.dll" />

    <xmlpoke file="${distribution.dir}\src\UnitTests\UnitTests.csproj"
            xpath="//VisualStudioProject/CSHARP/Build/Settings/Config[starts-with(@Name, 'Debug')]/@DefineConstants"
            value="DEBUG;TRACE;${project.properties.define}" />

    <xmlpoke file="${distribution.dir}\src\UnitTests\UnitTests.csproj"
        xpath="//VisualStudioProject/CSHARP/Build/Settings/Config[starts-with(@Name, 'Release')]/@DefineConstants"
        value="TRACE;${project.properties.define}" />

    <!-- Create distribution zip file -->
    <property name="core.assembly.file" value="${bin.dir}\${core.assembly.name}" />

    <property name="distribution.zip.name" value="${project.name}-${core.assembly.version}-${net.framework}.zip" />
    <zip zipfile="${build.dir}\${distribution.zip.name}">
      <fileset basedir="${distribution.dir}">
        <include name="\**" />
      </fileset>
    </zip>
  </target>

  <script language="C#" prefix="script" >
    <code>
      <references>
        <include name="System.Data.dll" />
      </references>

      <![CDATA[
                [Function("create-guid")]
                public static string CreateGUID() 
                {
                    return Guid.NewGuid().ToString().ToUpper();
                }
            ]]>
    </code>
  </script>

  <!-- <echo message='${script::create-guid()}'/> -->

  <target name="installer" descripton="Creates the WatiN installer with WiX" >

    <loadtasks assembly="${wix.dir}\Microsoft.Tools.WindowsInstallerXml.NAntTasks.dll" />

    <mkdir dir="${installer.wixobj.dir}" />
    <copy file="${installer.source.dir}\License.rtf" todir="${installer.wixobj.dir}" />

    <property name="extension" value="${string::replace(net.framework, '.', '')}" />
    <property name="extension" value="${string::replace(extension, 'net-', 'n')}" />
    <property name="installer.installdir.name" value="${core.assembly.buildmajorminor}.${extension}" />
    <property name="installer.file.name" value="${project.name}-${core.assembly.version}-${net.framework}.msi" />

    <!-- Create new product guid -->
    <xmlpoke file="${installer.source.dir}\Setup.wxs"
        xpath="/Wix/Product/@Id"
        value="${script::create-guid()}" />

    <!-- Create new package guid -->
    <xmlpoke file="${installer.source.dir}\Setup.wxs"
        xpath="//Wix/Product/Package/@Id"
        value="${script::create-guid()}" />

    <candle out="${installer.wixobj.dir}" exedir="${wix.dir}" >
      <defines>
        <define name="var.distdir" value="${distribution.dir}\" />
        <define name="var.productname" value="${project.name} ${core.assembly.buildmajorminor} for ${net.framework.fullname} " />
        <define name="var.productversion" value="${core.assembly.version}" />
        <define name="var.installdir.longname" value="${core.assembly.buildmajorminor}-${net.framework}" />
        <define name="var.installdir.name" value="${installer.installdir.name}" />
      </defines>
      <sources basedir="${installer.source.dir}">
        <include name="Setup.wxs" />
        <include name="files.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}" out="${build.dir}/${installer.file.name}" locfile="${wix.dir}/WixUI_en-us.wxl" rebuild="true">
      <sources basedir="${installer.wixobj.dir}">
        <include name="Setup.wixobj" />
        <include name="files.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>
  </target>

  <target name="full" description="Compiles, tests, and produces distributions">
    <call target="full-net-2.0" />
  </target>

  <target name="buildandtest" description="Compiles and runs tests">
    <call target="build-net-2.0" />
  </target>

  <target name="full-net-2.0" if="${framework::sdk-exists('net-2.0')}" description="Compiles, tests, and produces distributions for .Net 2.0">
    <call target="set-net-2.0-version" />
    <call target="clean" />
    <call target="build" />
    <call target="run-unit-tests" />
    <call target="ndoc" />
    <call target="dist" />
    <call target="installer"  />
  </target>

  <target name="build-net-2.0" if="${framework::sdk-exists('net-2.0')}" description="Compiles, tests for .Net 2.0">
    <call target="set-net-2.0-version" />
    <call target="clean" />
    <call target="build" />
    <call target="run-unit-tests" />
  </target>
  
  <target name="full-net-3.5" if="${framework::sdk-exists('net-3.5')}" description="Compiles, tests, and produces distributions for .Net 3.5">
    <call target="set-net-3.5-version" />
    <call target="clean" />
    <call target="build" />
    <call target="run-unit-tests" />
    <call target="ndoc" />
    <call target="dist" />
    <call target="installer"  />
  </target>

  <target name="build-net-3.5" if="${framework::sdk-exists('net-3.5')}" description="Compiles, tests for .Net 3.5">
    <call target="set-net-3.5-version" />
    <call target="clean" />
    <call target="build" />
    <call target="run-unit-tests" />
  </target>

</project>



